/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Perform a basic reset */

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /* box-sizing: border-box; It is a better practise to use the inheritance for the box sizing*/
    box-sizing: inherit;
}
/* Make the initial font setting into 10px (10/16=0.625) 
so everything can be changed to rem and easily used */

html {
    font-size: 62.5%;
    /* This change has been made as the default by browsers is generally 16px
     and this way users can zoom in and change default font sizes*/
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* font-size: 1.6rem; */
    line-height: 1.7;
    color: #777;
    padding: 3rem;

    box-sizing: border-box;
}

.header {
    height: 95vh;
    background-image: linear-gradient(#7ed56fb4, #28b485b0), url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    position: relative;

    clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    backface-visibility: hidden;  
    /*The back part of an animation is hidden 
    or to remove the shaking which occurs in some animation */
    margin-bottom: 6rem;
}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /* Extra properties
    animation-delay: 1s;
    animation-iteration-count: 2;
    animation-timing-function: ease-in;

    */
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation: moveInRight 1s ease-out; 
    /*Css figures out the properties of the animation by itself*/

}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
 
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
 
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(100%);

    }

    80% {
        transform: translateY(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    /* Button is inherently an inline element, adding the inline-block makes it move away from
    overlapping the earlier headings. */
    border-radius: 10rem;
    /* Gives the rounded edges to the button */
    transition: all .2s;
    /* The transition property needs to be added to the initial state and then it can be
    used around other states */
    position: relative;
    /* As the font-size was made inactive and everything was moved to rems, the font-size had to be set*/
    font-size: 1.6rem;
}

.btn:hover {
     transform: translateY(-3px); 
     /*When hovered, the button moves on the Y axis, hover is a pseudo class*/
     box-shadow: 0 1rem 2rem rgba(0,0,0,.2);
     /* boxshadow property values are 
     0 for shadow on x-axis
     10px for y-axis
     20px blur for effect
     rgba is almost black with slight opacity */
}

.btn:active {
    transform: translateY(-1px); 
    /*When clicked, the button moves on the Y axis, it's in relation to the link state*/
    box-shadow: 0 .5rem 1rem rgba(0,0,0,.2);
    /* shadow values are reduced to give the click effect */
}

.btn--white {
    background-color: #fff;
    color: #777;
}

.btn::after{
    /* This pseudo-element is hidden behind the original and it is used to 
    apply effects */
    content:"";
    /* The content property needs to be defined even if it's empty, else it won't work */
    display: inline-block;
    /* As the original button is an inline-block, the display is set as the same */
    height: 100%;
    width: 100%;
    /* As the ::after pseudo element is treated as a child of the original,
    100% will give the exact dimensions. */
    border-radius: 10rem;
    position: absolute;
    /* The position needs a reference and it will be in reference to the relative position
    of the first element it can find, hence setting the .btn to relative */
    top: 0;
    left: 0;
    /* The top and left place the button exactly behind the current button */
    z-index: -1;
    transition: all .4s;
}

.btn-white::after{
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    /* Scale property makes the button grow bigger in scale */
    opacity: 0;
    /* This makes the button invisible after growing */
}

.btn--animated {
    /* This class can be reused for button animations */
    animation: moveInBottom .5s ease-out .75s;
    /* Properties in order animation name, duration, timing funtion and delay */
    animation-fill-mode: backwards;
    /* The beginning property value (as defined in the first @keyframes at-rule) 
    is applied before the animation is displayed, during the period defined by 'animation-delay'. */

}